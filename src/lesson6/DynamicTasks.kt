@file:Suppress("UNUSED_PARAMETER")

package lesson6

import kotlin.math.max


/**
 * Наибольшая общая подпоследовательность.
 * Средняя
 *
 * Дано две строки, например "nematode knowledge" и "empty bottle".
 * Найти их самую длинную общую подпоследовательность -- в примере это "emt ole".
 * Подпоследовательность отличается от подстроки тем, что её символы не обязаны идти подряд
 * (но по-прежнему должны быть расположены в исходной строке в том же порядке).
 * Если общей подпоследовательности нет, вернуть пустую строку.
 * При сравнении подстрок, регистр символов *имеет* значение.
 */

// n = first.length
// m = second.length
// Трудоемкость O(m * n)
// Ресурсоемкость O((m + 1) * (n + 1))
fun longestCommonSubSequence(first: String, second: String): String {
    val table = Array(first.length + 1) { IntArray(second.length + 1) { 0 } }

    // filling table
    for (i in 1..first.length)
        for (j in 1..second.length)
            if (first[i - 1] == second[j - 1])
                table[i][j] = table[i - 1][j - 1] + 1
            else table[i][j] = max(table[i - 1][j], table[i][j - 1])

    var i = first.length
    var j = second.length
    val strBuilder = StringBuilder()

    // finding the way
    while (i > 0 && j > 0) {
        if (first[i - 1] == second[j - 1]) {
            strBuilder.append(first[i - 1])
            i--; j--
            continue
        }

        if (table[i - 1][j] == table[i][j])
            i--
        else j--
    }

    return strBuilder.toString().reversed()
}


/**
 * Наибольшая возрастающая подпоследовательность
 * Средняя
 *
 * Дан список целых чисел, например, [2 8 5 9 12 6].
 * Найти в нём самую длинную возрастающую подпоследовательность.
 * Элементы подпоследовательности не обязаны идти подряд,
 * но должны быть расположены в исходном списке в том же порядке.
 * Если самых длинных возрастающих подпоследовательностей несколько (как в примере),
 * то вернуть ту, в которой числа расположены раньше (приоритет имеют первые числа).
 * В примере ответами являются 2, 8, 9, 12 или 2, 5, 9, 12 -- выбираем первую из них.
 */
fun longestIncreasingSubSequence(list: List<Int>): List<Int> {
    TODO()
}

/**
 * Самый короткий маршрут на прямоугольном поле.
 * Сложная
 *
 * В файле с именем inputName задано прямоугольное поле:
 *
 * 0 2 3 2 4 1
 * 1 5 3 4 6 2
 * 2 6 2 5 1 3
 * 1 4 3 2 6 2
 * 4 2 3 1 5 0
 *
 * Можно совершать шаги длиной в одну клетку вправо, вниз или по диагонали вправо-вниз.
 * В каждой клетке записано некоторое натуральное число или нуль.
 * Необходимо попасть из верхней левой клетки в правую нижнюю.
 * Вес маршрута вычисляется как сумма чисел со всех посещенных клеток.
 * Необходимо найти маршрут с минимальным весом и вернуть этот минимальный вес.
 *
 * Здесь ответ 2 + 3 + 4 + 1 + 2 = 12
 */
fun shortestPathOnField(inputName: String): Int {
    TODO()
}

// Задачу "Максимальное независимое множество вершин в графе без циклов"
// смотрите в уроке 5